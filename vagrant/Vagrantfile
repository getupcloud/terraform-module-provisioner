# -*- mode: ruby -*-
# vi: set ft=ruby :

memory = 4096
local_interface = ENV["DEFAULT_INTERFACE"] || "eth0"
hostname = "#{ENV["VM_NAME"]}"
disks = [
  {
    :name => "containers",
    :device => "/dev/sdb",
    :mount_point => "/var/lib/containers",
    :size_gb => 20,
    :ide_device => 0,
    :ide_port => 1,
  },
  {
    :name => "kubelet",
    :device => "/dev/sdc",
    :mount_point => "/var/lib/kubelet",
    :size_gb => 2,
    :ide_device => 0,
    :ide_port => 2,
  }
]

if hostname.start_with?("master") then
  ip_addr = "192.168.56.10"
  disks << {
    :name => "etcd",
    :device => "/dev/sdd",
    :mount_point => "/var/lib/etcd",
    :size_gb => 1,
    :ide_device => 0,
    :ide_port => 3,
   }
end

if hostname.start_with?("infra") then
  ip_addr = "192.168.56.20"
end

if hostname.start_with?("app") then
  ip_addr = "192.168.56.30"
end

Vagrant.configure("2") do |config|
  config.vm.box = "bento/centos-7.9"
  config.vm.provider "virtualbox"
  config.vm.hostname = hostname
  #config.vm.network "public_network", bridge: local_interface
  config.vm.network "private_network", ip: ip_addr
  config.ssh.verify_host_key = :never
  # https://stackoverflow.com/questions/28471542/cant-ssh-to-vagrant-vms-using-the-insecure-private-key-vagrant-1-7-2
  config.ssh.insert_key = false
  config.ssh.private_key_path = "~/.vagrant.d/insecure_private_key"

  config.vm.provider :virtualbox do |vb|
    vb.gui = true
    vb.memory = memory
    vb.customize ["modifyvm", :id, "--paravirtprovider", "kvm"]
    vb.customize ["storagectl", :id, "--name", "SATA Controller", "--portcount", disks.length + 1]

    disks.each do |disk|
      vdi = "#{disk[:name]}.vdi"
      unless File.exist?(vdi)
        vb.customize [ "createmedium", "disk", "--filename", "#{disk[:name]}.vdi", "--format", "vdi", "--size", disk[:size_gb] * 1024 ]
      end
      vb.customize ['storageattach', :id,  '--storagectl', 'SATA Controller', '--port', disk[:ide_port], '--device', disk[:ide_device], '--type', 'hdd', '--medium', vdi]
    end
  end

  config.vm.provision "shell", name: "host-setup", inline: <<~SHELL
    # /vagrant/provision/provision.sh local-provision
    set -x
    sed -i s/^SELINUX=.*/SELINUX=disabled/ /etc/selinux/config
    setenforce 0
    #{
      s = ""
      disks.each do |disk|
        s += "mkfs.xfs #{disk[:device]}\n"
        s += "echo #{[disk[:device], disk[:mount_point], "xfs defaults,nofail 0 0"].join(" ")} >> /etc/fstab\n"
      end
      s
    }
    useradd provisioner
    echo -n provisioner | passwd --force --stdin provisioner
    echo '%provisioner ALL=(ALL) ALL' > /etc/sudoers.d/provisioner
    sed -i -e 's/^\s*PasswordAuthentication.*/PasswordAuthentication yes/g' /etc/ssh/sshd_config
  SHELL

  config.vm.provision "shell" do |shell|
    shell.privileged = true
    shell.inline = 'echo rebooting...'
    shell.reboot = true
  end

  config.vm.provision "shell", name: "route-setup", inline: <<~SHELL
    # required by ansible to use eth1 as default iface:
    # https://github.com/ansible/ansible/blob/stable-2.7/lib/ansible/module_utils/facts/network/linux.py#L71
    route add -host 8.8.8.8/32 gw #{ip_addr} dev eth1
  SHELL
end
